@page "/form"
@using System.ComponentModel.DataAnnotations
@using FamilyTree.Shared.Dto
@inject HttpClient Http

<h3>Form with Parent Selection</h3>

<EditForm Model="_formData" OnValidSubmit="HandleValidSubmit" FormName="MainForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="_formData.FirstName" class="form-control" />
        <ValidationMessage For="@(() => _formData.FirstName)" />
    </div>
    <div>
        <label for="surname">Surname:</label>
        <InputText id="surname" @bind-Value="_formData.LastName" class="form-control" />
        <ValidationMessage For="@(() => _formData.LastName)" />
    </div>
    <div>
        <label for="birthDate">Birth Date:</label>
        <InputDate id="birthDate" @bind-Value="_formData.BirthDate" class="form-control" />
        <ValidationMessage For="@(() => _formData.BirthDate)" />
    </div>
    <div>
        <label for="deathDate">Death Date:</label>
        <InputDate id="deathDate" @bind-Value="_formData.DeathDate" class="form-control" />
        <ValidationMessage For="@(() => _formData.DeathDate)" />
    </div>
    <div>
        <label for="gender">Gender:</label>
        <InputSelect id="gender" @bind-Value="_formData.Gender" class="form-control">
            @foreach (var gender in Enum.GetValues<FamilyTree.Shared.Gender>())
            {
                <option value="@gender">@gender</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _formData.Gender)" />
    </div>
    
    <!-- Parent selection -->
    <div>
        <label for="parents">Parents:</label>
        <InputSelect id="parents" class="form-control" @bind-Value="_selectedParentIds" multiple>
            <option value="">-- Select Parent(s) --</option>
            @foreach (var person in _availableParents)
            {
                <option value="@person.Id">@person.FirstName @person.LastName</option>
            }
        </InputSelect>
    </div>

    <br />
    <button class="btn btn-primary">Submit</button>
</EditForm>

@if (_submitted)
{
    <p>You submitted successfully!</p>
    <ul>
        <li><strong>Name:</strong> @_formData.FirstName</li>
        <li><strong>Surname:</strong> @_formData.LastName</li>
        <li><strong>Birth Date:</strong> @_formData.BirthDate?.ToShortDateString()</li>
        <li><strong>Death Date:</strong> @_formData.DeathDate?.ToShortDateString()</li>
        <li><strong>Parents:</strong> @(string.Join(", ", _formData.ParentIds))</li>
    </ul>
}

@code {
    private FormData _formData = new FormData();
    private bool _submitted = false;
    private List<PersonDto> _availableParents = [];
    private List<int> _selectedParentIds = [];

    protected override async Task OnInitializedAsync()
    {
        _formData = new FormData();

        _availableParents = await Http.GetFromJsonAsync<List<PersonDto>>("https://localhost:7160/api/People") ?? [];
    }

    private async Task HandleValidSubmit()
    {
        _submitted = true;

        _formData.ParentIds = _selectedParentIds;

        var response = await Http.PostAsJsonAsync("https://localhost:7160/api/People", _formData);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Form submitted successfully.");
        }
        else
        {
            Console.WriteLine("Failed to submit the form.");
        }
    }

    public class FormData
    {
        [Required(ErrorMessage = "Name is required")]
        public string? FirstName { get; set; }

        [Required(ErrorMessage = "Surname is required")]
        public string? LastName { get; set; }

        [Required(ErrorMessage = "Birth Date is required")]
        [DataType(DataType.Date)]
        public DateTime? BirthDate { get; set; }

        [Required(ErrorMessage = "Death Date is required")]
        [DataType(DataType.Date)]
        public DateTime? DeathDate { get; set; }

        [Required(ErrorMessage = "Gender is required")]
        public string? Gender { get; set; }

        public List<int> ParentIds { get; set; } = [];
    }
}